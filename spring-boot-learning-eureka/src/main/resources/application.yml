spring:
  application:
    name: eureka-server #定义服务名称

# eureka(最)简单单点开发配置。支持yml与properties两种，yml文件后缀必须为yml，不能是yaml，否则找不到该文件，使用默认配置。
# yml文件大小写敏感；
# 每个级别至少用1个空格缩进，也可多个，但同级别的必须一致，不支持tab，本项目按照eclipse的插件（spring官方Spring Tool Suite3.9.3）统一使用两个空格；
# 属性值与冒号间必须有一个空格。比如port:8761则不会生效。
server:
  port: 8761 # eureka服务器端口号。尽管无论官网还是大部分参考书都使用8761，但默认并不是，而是8080
  context-path: /eureka #设置服务上下文路径

#security: # 开启服务注册认证机制
#  basic:
#    enabled: true # 是否开启认证，默认true，需开启时可省略。
#  user:
#    name: eureka # 认证时，使用的用户名
#    password: eureka # 认证时，使用的密码

eureka:
  # 默认情况下，eureka server同时也是eureka client，用于相互注册形成高可用eureka服务。
  # 单点时，如果registerWithEureka配置为true，则eureka server会报错Cannot execute request on any known server
  client:
    #是否启用湖区注册服务信息，因为这是一个单节点的EurekaServer，不需要同步其他的EurekaServer节点的数据，所以设置为false；
    fetch-registry: false # 是否在本地缓存注册表信息，默认为true，当前为单点eureka server，不需要从其他eureka除获取注册表信息，更谈不上缓存，故配置为false
    #表示是否向eureka注册服务，即在自己的eureka中注册自己，默认为true，此处应该设置为false；
    register-with-eureka: false # 是否注册到eureka服务，默认为true，当前已为eureka server，且单点eureka，故配置为false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/eureka
  #      defaultZone: http://localhost:8761/eureka/eureka
  #        defaultZone: http://${security.user.name}:${security.user.password}@localhost:${server.port}/eureka
  instance:
    hostname: localhost
  server:
    #设为false，关闭自我保护，即Eureka server在云心光器件会去统计心跳失败比例在15分钟之内是否低于85%,如果低于85%，EurekaServer
    #会将这些事例保护起来，让这些事例不会过期，但是在保护器内如果刚哈这个服务提供者非正常下线了，此时服务消费者会拿到一个无效的服务
    #实例，此时调用会失败，对于这个问题需要服务消费者端有一些容错机制，如重试、断路器等；
    enable-self-preservation: false
    #扫描失效服务的间隔时间（单位是毫秒，摩恩是60*1000)，即60s
    eviction-interval-timer-in-ms: 10000